@inject GameState State;
@using System.Drawing;

<HeadContent>
    <style>
        :root {
            --board-bg:
                @ColorTranslator.ToHtml(BoardColor)
            ;
            --player1:
                @ColorTranslator.ToHtml(Player1Color)
            ;
            --player2:
                @ColorTranslator.ToHtml(Player2Color)
            ;
        }
    </style>
</HeadContent>
<div style={display:block}>
    <h3>Board Game: Connect Four</h3>

    <table class="score">
        <tr>
            <th>Scores</th>
        </tr>
        <tr>
            <td> Player 1: @Player1Score </td>
        </tr>
        <tr>
            <td> Player 2: @Player2Score </td>
        </tr>
    </table>
</div>

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">ðŸ”½</span>
    }
</nav>

<article>
    @winnerMessage <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>
<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
    </div>
    @for (var i = 0; i < 42; i++)
    {
        <span class="@pieces[i]"></span>
    }
</div>
@code {
    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";
    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow");

    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");

    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");
    public int Player1Score { get; set; } = 0;
    public int Player2Score { get; set; } = 0;

    private void UpdateScore(int winner)
    {
        if (winner == 1) Player1Score++;
        else if (winner == 2) Player2Score++;
    }

    private void PlayPiece(byte col)
    {
        errorMessage = string.Empty;
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }
        winnerMessage = State.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "Player 1 Wins!",
            GameState.WinState.Player2_Wins => "Player 2 Wins!",
            GameState.WinState.Tie => "It's a tie!",
            _ => ""
        };
        if (State.CheckForWin() == GameState.WinState.Player1_Wins)
            UpdateScore(1);
        else if (State.CheckForWin() == GameState.WinState.Player2_Wins)
            UpdateScore(2);
    }


    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }
}